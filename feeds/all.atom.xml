<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jaro.blog</title><link href="https://jaro.blog/" rel="alternate"></link><link href="https://jaro.blog/feeds/all.atom.xml" rel="self"></link><id>https://jaro.blog/</id><updated>2024-12-06T00:00:00+08:00</updated><entry><title>Conditional content removal using Docutils classes</title><link href="https://jaro.blog/blog/content-removal-with-docutils-classes.html" rel="alternate"></link><published>2021-06-07T00:00:00+08:00</published><updated>2024-12-06T00:00:00+08:00</updated><author><name>Jarosław Wierzbicki</name></author><id>tag:jaro.blog,2021-06-07:/blog/content-removal-with-docutils-classes.html</id><summary type="html">&lt;p&gt;Some time ago I had a problem where I had to exclude parts of one of my
documents based on a build-time condition. I wanted to maintain one document but
produce two versions: one that contained internal details of a product and one
that didn't.&lt;/p&gt;
&lt;p&gt;Nowadays I use &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt; (reST) and &lt;a class="reference external" href="https://docutils.sourceforge.io"&gt;Docutils&lt;/a&gt; for writing my documents
so naturally, I started Googling how to do it with the help of those tools.
After some research, I found an out-of-the-box solution (unsurprisingly because
we all have similar problems 😉). It may surprise you if you haven't
looked into this problem before.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Some time ago I had a problem where I had to exclude parts of one of my
documents based on a build-time condition. I wanted to maintain one document but
produce two versions: one that contained internal details of a product and one
that didn't.&lt;/p&gt;
&lt;p&gt;Nowadays I use &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt; (reST) and &lt;a class="reference external" href="https://docutils.sourceforge.io"&gt;Docutils&lt;/a&gt; for writing my documents
so naturally, I started Googling how to do it with the help of those tools.
After some research, I found an out-of-the-box solution (unsurprisingly because
we all have similar problems 😉). It may surprise you if you haven't
looked into this problem before.&lt;/p&gt;

&lt;div class="section" id="the-class-directive"&gt;
&lt;h2&gt;The &lt;em&gt;class&lt;/em&gt; directive&lt;/h2&gt;
&lt;p&gt;As the title reveals, the solution is the Docutils' &lt;em&gt;class&lt;/em&gt; directive. But
before we get to the main point let us explore what it can do and how it works
first. This will make the next (main) step more clear.&lt;/p&gt;
&lt;p&gt;The class directive allows adding a class attribute to document nodes. For
example, this can be useful for applying styles when generating HTML output.&lt;/p&gt;
&lt;p&gt;The class attribute can be applied in 2 ways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;to a &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/doctree.html#id205"&gt;structural element&lt;/a&gt;, e.g. a section&lt;/li&gt;
&lt;li&gt;to a &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/doctree.html#id209"&gt;body element&lt;/a&gt; (simple or compound), e.g. a paragraph&lt;/li&gt;
&lt;/ul&gt;
&lt;p id="listing-01"&gt;For example, we might want to add a &lt;code&gt;subsection&lt;/code&gt; class to a subsection
of a document, &lt;code&gt;paragraph&lt;/code&gt; and &lt;code&gt;emphasised&lt;/code&gt; classes to a paragraph
(we can apply more than one) and a &lt;code&gt;compound-body&lt;/code&gt; to a list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Title
 =====

 Subtitle
 --------

&lt;span class="hll"&gt;&lt;span class="p"&gt; ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; subsection
&lt;/span&gt;
 Section is a structural element
 &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;

&lt;span class="hll"&gt;&lt;span class="p"&gt; ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; paragraph emphasised
&lt;/span&gt;
 A paragraph is a simple body element.

&lt;span class="hll"&gt;&lt;span class="p"&gt; ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; list
&lt;/span&gt;
 &lt;span class="m"&gt;-&lt;/span&gt; Bullet list,
 &lt;span class="m"&gt;-&lt;/span&gt; is a compound body element.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above document will be converted to a document tree that will look something
like the below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;document&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Title
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Subtitle
&lt;span class="hll"&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;subsection&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;Section&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;structural&lt;span class="w"&gt; &lt;/span&gt;element
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;paragraph emphasised&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;paragraph&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;simple&lt;span class="w"&gt; &lt;/span&gt;body&lt;span class="w"&gt; &lt;/span&gt;element.
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;bullet_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;Bullet&lt;span class="w"&gt; &lt;/span&gt;list,
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;compound&lt;span class="w"&gt; &lt;/span&gt;body&lt;span class="w"&gt; &lt;/span&gt;element.
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="message-body message"&gt;The above output is a so-called &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/doctree.html#pseudo-xml"&gt;pseudo-XML&lt;/a&gt;. It’s a format used
in Docutils for presenting a document tree in a easy-to-understand
way. Note that for simplicity some of the node attributes were
removed.&lt;/p&gt;
&lt;p&gt;As you can see some elements in the tree were assigned a &lt;code&gt;classes&lt;/code&gt;
attribute. Those are the same elements that we preceded with the class
directives. The general rule is that the directive is applied to a whole node
following the directive, so:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Class applied to a structural node applies to the whole node, e.g. to the
whole section.&lt;/li&gt;
&lt;li&gt;Class applied to a simple body element applies only to that element, e.g.
to a paragraph.&lt;/li&gt;
&lt;li&gt;Class applied to a compound body element applies to the whole element but not
to its children, e.g. to the top element of a list but not the list elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might wonder what's going to happen when we apply a class to more than one
body element? Do we have to prepend every element with a class directive? If we
follow the previous example then yes but there's a better way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Title
 =====

 Subtitle
 --------

 Section is a structural element
 &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;

&lt;span class="hll"&gt;&lt;span class="p"&gt; ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; a-block
&lt;/span&gt;
     A paragraph is a simple body element.

     &lt;span class="m"&gt;-&lt;/span&gt; Bullet list
     &lt;span class="m"&gt;-&lt;/span&gt; is a compound body element.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above example will give a document tree with the below structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;document&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Title
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Subtitle
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;Section&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;structural&lt;span class="w"&gt; &lt;/span&gt;element
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a-block&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;paragraph&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;simple&lt;span class="w"&gt; &lt;/span&gt;body&lt;span class="w"&gt; &lt;/span&gt;element.
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;bullet_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a-block&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;Bullet&lt;span class="w"&gt; &lt;/span&gt;list
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;compound&lt;span class="w"&gt; &lt;/span&gt;body&lt;span class="w"&gt; &lt;/span&gt;element.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how the indented block was placed directly in the subsection and the
class &lt;code&gt;a-block&lt;/code&gt; was applied to each of the indented elements. This works
with the body elements only. If we try to do it for any of the structural
elements it won't work, i.e. sections can't be in the class' indented block.&lt;/p&gt;
&lt;p&gt;Class directives can also be nested:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Title
 =====

 Subtitle
 --------

 Section is a structural element
 &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;

&lt;span class="hll"&gt;&lt;span class="p"&gt; ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; level-0
&lt;/span&gt;
     Paragraph at level 0.

&lt;span class="hll"&gt;&lt;span class="p"&gt;     ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; level-1
&lt;/span&gt;
         Paragraph at level 1.

&lt;span class="hll"&gt;&lt;span class="p"&gt;         ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; level-2
&lt;/span&gt;
             Paragraphs at level 2.

&lt;span class="hll"&gt;&lt;span class="p"&gt;             ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; level-3
&lt;/span&gt;
                 Paragraph at level 3.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would results in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;document&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Title
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;Subtitle
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;Section&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;structural&lt;span class="w"&gt; &lt;/span&gt;element
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;level-0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;Paragraph&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;level&lt;span class="w"&gt; &lt;/span&gt;0.
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;level-1 level-0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;Paragraph&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;level&lt;span class="w"&gt; &lt;/span&gt;1.
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;level-2 level-1 level-0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;Paragraphs&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;level&lt;span class="w"&gt; &lt;/span&gt;2.
&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;level-3 level-2 level-1 level-0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;Paragraph&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;level&lt;span class="w"&gt; &lt;/span&gt;3.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's pretty cool, right? 😁&lt;/p&gt;
&lt;p&gt;In all the above examples, we applied the class directive to the whole compound
body elements but it's also possible to do it to individual items, e.g. in
the case of a list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt; ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; list

 &lt;span class="m"&gt;-&lt;/span&gt; Bullet list,

&lt;span class="hll"&gt;&lt;span class="p"&gt;     ..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; list-item
&lt;/span&gt;
 &lt;span class="m"&gt;-&lt;/span&gt; is a compound
 &lt;span class="m"&gt;-&lt;/span&gt; body element
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class in such case is applied to the second item only:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;bullet_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;Bullet&lt;span class="w"&gt; &lt;/span&gt;list,
&lt;span class="hll"&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;classes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list-item&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;compound
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;list_item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;body&lt;span class="w"&gt; &lt;/span&gt;element
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just remember that the class directive, in this case, must be properly aligned
with the preceding list item, otherwise it won't work as expected.&lt;/p&gt;
&lt;p&gt;Now that we know everything (or at least enough 😉) about the class
directive let's move to the main point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="excluding-nodes-of-a-specific-class"&gt;
&lt;h2&gt;Excluding nodes of a specific class&lt;/h2&gt;
&lt;p&gt;The lengthy explanation above led us to this point where we can now comfortably
try and tackle the main problem. This part will be much shorter.&lt;/p&gt;
&lt;p&gt;In Docutils classes can be used for one more thing besides what classes are
usually used for: they allow to exclude nodes from the document. This can be
done by passing a class name to the &lt;code&gt;--strip-elements-with-class&lt;/code&gt; option
of the &lt;code&gt;rst2xxx.py&lt;/code&gt; family of commands, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rst2html5.py&lt;span class="w"&gt; &lt;/span&gt;--strip-elements-with-class&lt;span class="o"&gt;=&lt;/span&gt;internal&lt;span class="w"&gt; &lt;/span&gt;doc.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command will generate an HTML document with all of the nodes with
an &lt;code&gt;internal&lt;/code&gt; class removed. That's right, it's that easy 😉.&lt;/p&gt;
&lt;p&gt;So if the &lt;em&gt;doc.rst&lt;/em&gt; looks like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Title&lt;/span&gt;
&lt;span class="gh"&gt;=====&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; internal

&lt;span class="gh"&gt;Internal section&lt;/span&gt;
&lt;span class="gh"&gt;----------------&lt;/span&gt;

Internal content.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; external

&lt;span class="gh"&gt;External section&lt;/span&gt;
&lt;span class="gh"&gt;----------------&lt;/span&gt;

External content.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the HTML output will look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xml:lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;document&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;external section&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;external-section&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;External section&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;External content.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further, we'll explore how the class directive is implemented. Feel free to skip
that part if you're not interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-it-work"&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;Docutils has two concepts that are involved in processing classes. There is
a &lt;em&gt;directive&lt;/em&gt; and there is a &lt;em&gt;transform&lt;/em&gt;.&lt;/p&gt;
&lt;div class="section" id="directive"&gt;
&lt;h3&gt;Directive&lt;/h3&gt;
&lt;p&gt;Directives &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt; are an extension mechanism for the reStructuredText markup
language. Each directive starts with a double full stop and whitespace and
ends with a double colon and whitespace with the directive type in between
e.g. &lt;code&gt;.. class:: class-name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Directives are a very flexible way of extending Docutils &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt; so let's take
a look at the code of the class directive &lt;a class="footnote-reference" href="#footnote-4" id="footnote-reference-4"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each directive extends the &lt;code&gt;docutils.parsers.rst.Directive&lt;/code&gt; &lt;a class="footnote-reference" href="#footnote-5" id="footnote-reference-5"&gt;[5]&lt;/a&gt; base
class and implements &lt;code&gt;run&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils.parsers.rst&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Directive&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;required_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;optional_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;final_argument_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;has_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can pass some configuration parameters as class variables like the above
&lt;code&gt;required_arguments = 1&lt;/code&gt; which tells the parser to look for at least one
parameter for the directive, which in this case are the names of classes or
&lt;code&gt;has_content = True&lt;/code&gt; which indicates to the parser that the class
directive accepts indented blocks as it's content.&lt;/p&gt;
&lt;p&gt;Further, let's look at what is inside the &lt;code&gt;run&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;class_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;node_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; method deals with two cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the &lt;code&gt;self.content&lt;/code&gt; variable is not empty it means that there was
a block (indented) passed to the directive.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;self.content&lt;/code&gt; is empty the directive will affect the next node
in the content tree (a next sibling).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first case where an indented block was passed to the directive is handled
like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;classes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;node_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, we create an empty element that will serve as a container for the content
included in the nested block: &lt;code&gt;container = nodes.Element()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we parse the directive's content with the call to &lt;code&gt;nested_parse()&lt;/code&gt;
&lt;a class="footnote-reference" href="#footnote-6" id="footnote-reference-6"&gt;[6]&lt;/a&gt;. This will add children elements created from &lt;code&gt;self.content&lt;/code&gt; and put
them into the &lt;code&gt;container&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then iterate over all of the created children in the container and add the
class name to the node's &lt;code&gt;classes&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;As the last step, we add all of the &lt;code&gt;container&lt;/code&gt;'s children to the
&lt;code&gt;node_list&lt;/code&gt; which is going to be returned from the &lt;code&gt;run&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In the second case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;misc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClassAttribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;class_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state_machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;note_pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;node_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since there is no content directly associated with the class directive we will
apply the class to the next element in the element tree (in other words to a
sibling). To do that we need to defer this operation until the whole document
is parsed (since we don't know our sibling yet).&lt;/p&gt;
&lt;p&gt;To postpone applying our class to the sibling we create and insert a &lt;em&gt;pending&lt;/em&gt;
node. This node will then be processed by a &lt;a class="reference internal" href="#transform"&gt;Transform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To create the pending node we use the &lt;code&gt;nodes.pending&lt;/code&gt; method and pass
3 arguments to it: the &lt;code&gt;misc.ClassAttribute&lt;/code&gt; transform class (this is
the operation that will be executed on the pending node later), an options
dictionary and a &lt;code&gt;self.block_text&lt;/code&gt; (which is a string containing the
whole directive).&lt;/p&gt;
&lt;p&gt;We then add this node to the &lt;code&gt;node_list&lt;/code&gt; which will be returned from
the &lt;code&gt;run()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;That's pretty much everything that the class directive implementation is doing.
Next (&lt;a class="reference internal" href="#transform"&gt;Transform&lt;/a&gt;) we'll see what happens with the pending node that we created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="transform"&gt;
&lt;h3&gt;Transform&lt;/h3&gt;
&lt;p&gt;Transforms &lt;a class="footnote-reference" href="#footnote-7" id="footnote-reference-7"&gt;[7]&lt;/a&gt; are run after the whole document has been parsed and their
purpose is to change the document tree in place. They can perform different
operations like resolving references or removing elements based on a
certain condition.&lt;/p&gt;
&lt;p&gt;We'll take a look at the &lt;code&gt;ClassAttribute&lt;/code&gt; &lt;a class="footnote-reference" href="#footnote-8" id="footnote-reference-8"&gt;[8]&lt;/a&gt; transform that is used by the
&lt;code&gt;Class&lt;/code&gt; directive class.&lt;/p&gt;
&lt;p&gt;Each transform object derives from the &lt;code&gt;docutils.tranforms.Transform&lt;/code&gt; &lt;a class="footnote-reference" href="#footnote-9" id="footnote-reference-9"&gt;[9]&lt;/a&gt;
class and implements the &lt;code&gt;apply&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;default_priority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's pretty straightforward. One thing that is worth mentioning is that the
transforms are run in order according to their priorities hence the class
attribute &lt;code&gt;default_priority&lt;/code&gt; above.&lt;/p&gt;
&lt;p&gt;Next, let's take a look at the &lt;code&gt;apply&lt;/code&gt; method implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startnode&lt;/span&gt;
    &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace_self&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's look at how the &lt;code&gt;for&lt;/code&gt; loop works first and then we'll check what's
happening inside of it.&lt;/p&gt;
&lt;p&gt;First, we get a reference to the pending node that was added in the &lt;code&gt;Class&lt;/code&gt;
class and to its parent. Then we go into a &lt;code&gt;while&lt;/code&gt; loop that will
loop as long as the &lt;code&gt;parent&lt;/code&gt; node exists.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;while&lt;/code&gt; loop there is &lt;code&gt;for ... else&lt;/code&gt; construct which in short
loops over indices in a range. If there are no indices to loop over (no elements
at all) or no &lt;code&gt;break&lt;/code&gt; is executed inside the loop, it will jump to the
&lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;So in the above case, we generate a range of indices of children that are
&amp;quot;behind&amp;quot; the pending node (i.e. siblings of the pending node that are following
the node in the tree). If there are siblings like that we execute whatever is
inside the &lt;code&gt;for&lt;/code&gt; loop and return (well that depends on what's in the loop
of course). If there are no siblings following the pending node (which can
happen if we put &lt;code&gt;.. class::&lt;/code&gt; before for &lt;a class="reference internal" href="#listing-01"&gt;example&lt;/a&gt; a
section) we go level up in the node tree (the &lt;code&gt;else&lt;/code&gt; clause) and repeat
the operation until we find a node that we're looking for.&lt;/p&gt;
&lt;p&gt;Finally, if we don't find any nodes that we can apply our operations to, we
replace the pending node with an error node.&lt;/p&gt;
&lt;p&gt;The operations we apply to the nodes once we find them are pretty
straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Invisible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
        &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_message&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;classes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The whole idea here is to get the first eligible sibling that exists after the
pending node (or its parent, or its parent's parent, etc.) and add the
&lt;code&gt;classes&lt;/code&gt; attribute to it (same as we did in the &lt;code&gt;Class&lt;/code&gt;
implementation) and then if that happens, remove the pending node and return.&lt;/p&gt;
&lt;p&gt;There are some exceptions like the &lt;code&gt;nodes.Invisible&lt;/code&gt; and
&lt;code&gt;nodes.system_message&lt;/code&gt; nodes that are skipped over in the loop but that's
not important here. Let's just say that those node types don't qualify as
regular nodes so classes can't be applied to them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Classes are an excellent way of e.g. customising how a document looks without
writing any extensions to Docutils. They also allow control of what goes into
a document and what doesn't. Of course, there are certain limitations of this
mechanism but for a large number of the use cases, they should be a great, quick
and easy way to achieve the desired outcome when writing our documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading"&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html"&gt;reStructuredText Markup Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docutils.sourceforge.io/"&gt;Docutils: Documentation Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docutils.sourceforge.io/docs/dev/hacking.html"&gt;Docutils Hacker's Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docutils.sourceforge.io/docs/user/config.html"&gt;Docutils Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/doctree.html"&gt;The Docutils Document Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/"&gt;Docutils repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="footnotes"&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-1"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#directives"&gt;reStructuredText Markup Specification, Directives&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-2"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/rst/directives.html"&gt;reStructuredText Directives&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-3"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/howto/rst-directives.html"&gt;Creating reStructuredText Directives&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-4"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://github.com/docutils-mirror/docutils/blob/e88c5fb08d5cdfa8b4ac1020dd6f7177778d5990/docutils/parsers/rst/directives/misc.py#L327"&gt;https://github.com/docutils-mirror/docutils, docutils/parsers/rst/directives/misc.py:327&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-5"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-5"&gt;[5]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://github.com/docutils-mirror/docutils/blob/e88c5fb08d5cdfa8b4ac1020dd6f7177778d5990/docutils/parsers/rst/__init__.py#L194"&gt;https://github.com/docutils-mirror/docutils, docutils/parsers/rst/__init__.py:194&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-6"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-6"&gt;[6]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://github.com/docutils-mirror/docutils/blob/e88c5fb08d5cdfa8b4ac1020dd6f7177778d5990/docutils/parsers/rst/states.py#L257"&gt;https://github.com/docutils-mirror/docutils, docutils/parsers/rst/states.py:257&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-7"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-7"&gt;[7]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/transforms.html"&gt;Docutils Transforms&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-8"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-8"&gt;[8]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://github.com/docutils-mirror/docutils/blob/e88c5fb08d5cdfa8b4ac1020dd6f7177778d5990/docutils/transforms/misc.py#L35"&gt;https://github.com/docutils-mirror/docutils, docutils/transforms/misc.py:35&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-9"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-9"&gt;[9]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://github.com/docutils-mirror/docutils/blob/e88c5fb08d5cdfa8b4ac1020dd6f7177778d5990/docutils/transforms/__init__.py#L33"&gt;https://github.com/docutils-mirror/docutils, docutils/transforms/__init__.py:33&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Documentation"></category><category term="Docutils"></category><category term="documentation"></category><category term="reStructuredText"></category><category term="reST"></category></entry><entry><title>Connecting to Android device from Windows Subsystem for Linux using ADB</title><link href="https://jaro.blog/blog/adb-in-wsl2.html" rel="alternate"></link><published>2021-06-01T00:00:00+08:00</published><updated>2021-06-01T00:00:00+08:00</updated><author><name>Jarosław Wierzbicki</name></author><id>tag:jaro.blog,2021-06-01:/blog/adb-in-wsl2.html</id><summary type="html">&lt;p&gt;A few weeks ago COVID-19 finally hit Taiwan (so far we've been doing pretty
well) and I had to move to work from home like the rest of the world (well at
least some of it). This forced me to use my work laptop for more than meetings.&lt;/p&gt;
&lt;p&gt;Normally I use a Linux PC for daily work so to get at least some of the comfort
back I've set up Windows Subsystem for Linux version 2 (WSL2) on the laptop.&lt;/p&gt;
&lt;p&gt;This didn't go without a few bumps along the way. The biggest one was the fact
that WSL2 doesn't support accessing USB devices (version 1 allegedly does &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;
but I didn't have a chance to check) from Linux. And this was a problem for me
since I need to connect to an Android device frequently.&lt;/p&gt;
&lt;p&gt;But as long as there's Internet there's hope. After digging for some time
I wasn't disappointed because it turned out that there is a solution to this
problem.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A few weeks ago COVID-19 finally hit Taiwan (so far we've been doing pretty
well) and I had to move to work from home like the rest of the world (well at
least some of it). This forced me to use my work laptop for more than meetings.&lt;/p&gt;
&lt;p&gt;Normally I use a Linux PC for daily work so to get at least some of the comfort
back I've set up Windows Subsystem for Linux version 2 (WSL2) on the laptop.&lt;/p&gt;
&lt;p&gt;This didn't go without a few bumps along the way. The biggest one was the fact
that WSL2 doesn't support accessing USB devices (version 1 allegedly does &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;
but I didn't have a chance to check) from Linux. And this was a problem for me
since I need to connect to an Android device frequently.&lt;/p&gt;
&lt;p&gt;But as long as there's Internet there's hope. After digging for some time
I wasn't disappointed because it turned out that there is a solution to this
problem.&lt;/p&gt;

&lt;div class="section" id="how-does-android-debug-bridge-adb-work"&gt;
&lt;h2&gt;How does Android Debug Bridge (ADB) work?&lt;/h2&gt;
&lt;p&gt;Let's just quickly look at how the Android Debug Bridge (ADB) works.&lt;/p&gt;
&lt;p&gt;ADB is a command line tool that implements client-server architecture &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;. It
consists of three parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A client, which runs on a development machine and sends commands to the device
with the help of the server. This is the &lt;code&gt;adb&lt;/code&gt; command line tool.&lt;/li&gt;
&lt;li&gt;A server, which runs on the development machine and communicates directly with
the device (daemon). It accepts commands from the client and forwards them
to the device (it's started by &lt;code&gt;adb&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;A daemon (&lt;code&gt;adbd&lt;/code&gt;), which runs on a device and accepts commands from the
server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we execute &lt;code&gt;adb&lt;/code&gt; command it tries to connect to the server. If the
server is not running it's going to be automatically started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ adb devices
&lt;span class="hll"&gt; * daemon not running; starting now at tcp:5037
&lt;/span&gt; * daemon started successfully
 List of devices attached
 0123456789A     device
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sure enough when we list the processes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ps -eo pid,command | awk &amp;#39;!/grep/ &amp;amp;&amp;amp; /adb/&amp;#39;
&lt;span class="hll"&gt; 599501 adb -L tcp:5037 fork-server server --reply-fd 4
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the ADB server is running in the background. The above line
also tells us that the server is listening on TCP socket localhost:5037
(localhost is implicit here).&lt;/p&gt;
&lt;p&gt;The fact that the server is listening on a TCP socket already hints at how we
can make the ADB working in WSL2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connecting-from-wsl-to-adb"&gt;
&lt;h2&gt;Connecting from WSL to ADB&lt;/h2&gt;
&lt;p&gt;As I already mentioned we need a server and a client to connect to an Android
device. Let's take a look at how to set those two up.&lt;/p&gt;
&lt;div class="section" id="the-server"&gt;
&lt;h3&gt;The server&lt;/h3&gt;
&lt;p&gt;The first thing we have to do is to determine the version of the client that
runs in WSL. We can do that by running (in WSL):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ adb version
&lt;span class="hll"&gt; Android Debug Bridge version 1.0.41
&lt;/span&gt; Version 30.0.4-6686687
 Installed as /home/jaro/platform-tools/adb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case, it's 1.0.41. This is important because we need to match this version
on the Windows side. The easiest way is just to download the appropriate version
for example from &lt;a class="reference external" href="https://androidmtk.com/download-android-sdk-platform-tools"&gt;this website&lt;/a&gt;. But there are also other
methods &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt; &lt;a class="footnote-reference" href="#footnote-4" id="footnote-reference-4"&gt;[4]&lt;/a&gt; if you don't feel comfortable downloading stuff from random
websites on the Internet 😉.&lt;/p&gt;
&lt;p&gt;When we get the appropriate version of the tool set up in our Windows we can
check if the version indeed matches the Linux counterpart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; C:\Users\jaro\platform-tools&amp;gt;adb.exe version
&lt;span class="hll"&gt; Android Debug Bridge version 1.0.41
&lt;/span&gt; Version 30.0.4-6686687
 Installed as C:\Users\jaro\platform-tools\adb.exe
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does! We can now start the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\platform-tools&amp;gt; adb.exe -a -P 5037 nodaemon server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will run the ADB server in the foreground (I find it more
convenient than running it in the background as it tells me that the server is
indeed running on Windows). The &lt;code&gt;-a&lt;/code&gt; option will make the server listen on
all interfaces (important!) on port &lt;code&gt;5037&lt;/code&gt;. Specifying a port is
superfluous as the server by default starts on port &lt;code&gt;5037&lt;/code&gt; but I included
it for clarity reasons.&lt;/p&gt;
&lt;p&gt;The above might trigger a Windows firewall alert that will ask if we want to set
up a rule for the ADB.&lt;/p&gt;
&lt;img alt="Windows Defender Firewall dialog." src="https://jaro.blog/blog/images/windows_defender_dialog.png" /&gt;
&lt;p&gt;From the perspective of accessing the ADB from WSL, it doesn't make much
difference. If we allow the access then we'll be able to access the ADB server
also from another computer on the network.&lt;/p&gt;
&lt;p&gt;We now have a working ADB server running. Let's take care of the client next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-client"&gt;
&lt;h3&gt;The client&lt;/h3&gt;
&lt;p&gt;The first thing we need to do to establish a connection to the server is to
obtain the Windows IP address. There are two addresses we can use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; C:\Users\jaro&amp;gt;ipconfig

 Ethernet adapter vEthernet (WSL):

 ...
&lt;span class="hll"&gt; IPv4 Address. . . . . . . . . . . : 172.20.96.1
&lt;/span&gt; Subnet Mask . . . . . . . . . . . : 255.255.240.0
 Default Gateway . . . . . . . . . :

 Wireless LAN adapter Wi-Fi:

 ...
&lt;span class="hll"&gt; IPv4 Address. . . . . . . . . . . : 192.168.0.203
&lt;/span&gt; Subnet Mask . . . . . . . . . . . : 255.255.255.0
 Default Gateway . . . . . . . . . : 192.168.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first IP address is an address of a WSL virtual machine's interface
&lt;code&gt;vEthernet (WS)&lt;/code&gt; and in my case, it's &lt;strong&gt;172.20.96.1&lt;/strong&gt;. The second address
is the address of my Wi-Fi interface and it's &lt;strong&gt;192.168.0.203&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We can use both of those addresses but in the case of the Wi-Fi address (or
other physical interfaces), we have to enable access to &lt;code&gt;adb.exe&lt;/code&gt; in
Windows Defender Firewall. Otherwise, this approach will not work. That is why
using the IP address of the virtual network interface is easier. Allowing
communication between Windows and Linux is this interface's purpose after all.&lt;/p&gt;
&lt;p&gt;Getting the IP address of the server from Windows after every reboot is a little
inconvenient. Luckily this address is also available for Linux in
&lt;em&gt;/etc/resolv.conf&lt;/em&gt; file &lt;a class="footnote-reference" href="#footnote-5" id="footnote-reference-5"&gt;[5]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat cat /etc/resolv.conf
# This file was automatically generated by WSL...
# [network]
# generateResolvConf = false
nameserver 172.20.96.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Armed with the IP address of the server we can finally make the connection. We
can do this by executing &lt;code&gt;adb&lt;/code&gt; command with an IP address and TCP port
of the server like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb -H 172.20.96.1 -P 5037 devices
List of devices attached
0123456789A     device
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Specifying the IP address/hostname and port each time we want to access a
device sounds tedious. There is a better way. We can make use of an
&lt;code&gt;ADB_SERVER_SOCKET&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt; $ export ADB_SERVER_SOCKET=tcp:$(cat /etc/resolv.conf | awk &amp;#39;/nameserver/ {print $2}&amp;#39;):5037
&lt;/span&gt; $ adb devices
 List of devices attached
 0123456789A     device
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could even put this into our &lt;em&gt;~/.bashrc&lt;/em&gt; and not worry about it anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;While not instantaneously obvious, accessing Android devices using ADB from
Windows Subsystem for Linux is pretty easy. Once we set up the tools all it
takes is to execute two commands.&lt;/p&gt;
&lt;p&gt;One on Windows to run the ADB server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\platform-tools&amp;gt; adb.exe -a -P 5037 nodaemon server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And one on Linux to connect the ADB client to the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ export ADB_SERVER_SOCKET=tcp:$(cat /etc/resolv.conf | awk &amp;#39;/nameserver/ {print $2}&amp;#39;):5037
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, it just works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading"&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul class="footnotes"&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-1"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions#exceptions-for-using-wsl-1-rather-than-wsl-2"&gt;Exceptions for using WSL 1 rather than WSL 2&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-2"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://developer.android.com/studio/command-line/adb"&gt;Android Debug Bridge (adb)&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-3"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://developer.android.com/studio/releases/platform-tools"&gt;SDK Platform Tools release notes&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-4"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://stackoverflow.com/questions/53453640/is-there-a-way-to-install-an-older-version-of-android-platform-tools"&gt;Is there a way to install an older version of Android platform-tools?&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-5"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-5"&gt;[5]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions#accessing-windows-networking-apps-from-linux-host-ip"&gt;Accessing Windows networking apps from Linux (host IP)&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Tips &amp; Tricks"></category><category term="ADB"></category><category term="Android"></category><category term="Linux"></category><category term="Windows"></category><category term="WSL"></category><category term="WSL2"></category></entry><entry><title>Serving compressed files from Google Cloud Storage</title><link href="https://jaro.blog/blog/serve-gzip-files-from-gcs.html" rel="alternate"></link><published>2020-01-14T00:00:00+08:00</published><updated>2021-06-06T00:00:00+08:00</updated><author><name>Jarosław Wierzbicki</name></author><id>tag:jaro.blog,2020-01-14:/blog/serve-gzip-files-from-gcs.html</id><summary type="html">&lt;p&gt;Recently I’ve been looking into some ways to optimise the loading speed
of a website that I’m working on. One of the possible improvements suggested
by Chromium’s &lt;a class="reference external" href="https://developers.google.com/web/tools/lighthouse"&gt;Audit&lt;/a&gt; tool
was to &lt;a class="reference external" href="https://web.dev/uses-text-compression"&gt;enable text  compression&lt;/a&gt;.
An obvious thing to do, one might say, but the question is not whether to do it
at all but rather how to do it.&lt;/p&gt;
&lt;p&gt;Let’s start from the beginning though. The idea is simple. Instead of serving
plain text files like CSS and JavaScript to the browser, those files should be
sent compressed so that the browser, upon receiving them, can decompress them
to a plain text format. There is, of course, a CPU time cost to this approach
but in most cases the savings from the data transfer outweigh it by a large
margin &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. This is particularly true for mobile devices where the bandwidth
is often limited.&lt;/p&gt;
&lt;p&gt;Many servers nowadays support compression (be that dynamic or static) and there
are plenty of resources describing how to enable it but for some reason I
couldn’t quickly find information on how exactly to do it for Google Cloud
Storage.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently I’ve been looking into some ways to optimise the loading speed
of a website that I’m working on. One of the possible improvements suggested
by Chromium’s &lt;a class="reference external" href="https://developers.google.com/web/tools/lighthouse"&gt;Audit&lt;/a&gt; tool
was to &lt;a class="reference external" href="https://web.dev/uses-text-compression"&gt;enable text  compression&lt;/a&gt;.
An obvious thing to do, one might say, but the question is not whether to do it
at all but rather how to do it.&lt;/p&gt;
&lt;p&gt;Let’s start from the beginning though. The idea is simple. Instead of serving
plain text files like CSS and JavaScript to the browser, those files should be
sent compressed so that the browser, upon receiving them, can decompress them
to a plain text format. There is, of course, a CPU time cost to this approach
but in most cases the savings from the data transfer outweigh it by a large
margin &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. This is particularly true for mobile devices where the bandwidth
is often limited.&lt;/p&gt;
&lt;p&gt;Many servers nowadays support compression (be that dynamic or static) and there
are plenty of resources describing how to enable it but for some reason I
couldn’t quickly find information on how exactly to do it for Google Cloud
Storage.&lt;/p&gt;

&lt;div class="section" id="google-cloud-storage"&gt;
&lt;h2&gt;Google Cloud Storage&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cloud.google.com/storage/"&gt;Google Cloud Storage&lt;/a&gt; (GCS) by default
serves files uncompressed. There is however an option to enable
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Gzip"&gt;gzip&lt;/a&gt; compression for selected files.
There is a catch though. It’s only possible to use static compression which
means that the files need to be uploaded already compressed to the storage.
Some servers allow you to use dynamic compression which means that they will
compress files on the fly when the files are requested by a client but
unfortunately GCS, as I mentioned, doesn't do this.&lt;/p&gt;
&lt;p&gt;So how to do it in GCS, you might ask. Turns out Google makes it extremely easy
to compress files upon uploading using their
&lt;a class="reference external" href="https://cloud.google.com/storage/docs/gsutil"&gt;gsutil&lt;/a&gt; tool.&lt;/p&gt;
&lt;p&gt;There are two ways to upload multiple files at a time to Google Cloud Storage
using the &lt;code&gt;gsutil&lt;/code&gt; command. The first is to use &lt;code&gt;rsync&lt;/code&gt; and the
other one is to use the &lt;code&gt;cp&lt;/code&gt; sub-command &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;. Usually &lt;code&gt;rsync&lt;/code&gt;
is more convenient but in this case we need to use &lt;cite&gt;cp&lt;/cite&gt; because the former
doesn’t support compressing files during the upload (well that’s not exactly
true, read further what the &lt;code&gt;-j&lt;/code&gt; option does and why it's not applicable
here).&lt;/p&gt;
&lt;p&gt;Let's get to business. Using the &lt;code&gt;cp&lt;/code&gt; sub-command is really easy, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;gsutil&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;css,js,map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;LOCAL_DIR&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gs://&lt;span class="o"&gt;[&lt;/span&gt;BUCKET&lt;span class="o"&gt;]&lt;/span&gt;/&lt;span class="o"&gt;[&lt;/span&gt;REMOTE_DIR&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s break it down:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;-m&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This option tells the &lt;code&gt;cp&lt;/code&gt; sub-command to run in parallel. While this
is not really needed here, it can greatly shorten the upload time so it's
a good idea to use it.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;-z [ext,...]&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Causes all files with given extensions to be compressed before the upload
and keeps them like that afterwards (this is how it differs from
the &lt;code&gt;-j&lt;/code&gt; option which only compresses files for the duration
of the upload process and decompresses them at the destination).&lt;/p&gt;
&lt;p class="last"&gt;Beyond compressing of the files, the command will also apply the required
attributes to the stored files needed to properly serve them compressed
&lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;. In our example, all CSS, JS and MAP files will be stored compressed
(using gzip).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;LOCAL_DIR&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The directory path to the files we want to upload to Google Cloud Storage.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;BUCKET&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Name of the Google Cloud Storage bucket.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;REMOTE_DIR&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Remote directory in the bucket that the files will be copied to.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;If you have public access configured to your bucket, you can test if the files
are served compressed by opening a link to one of them in your browser (if not,
then you'll need to find a way to do it in your particular case by yourself):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://storage.googleapis.com/[BUCKET_NAME]/[FILE_PATH]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and checking (for example, by using the web browser's development tools) if the
response contains &lt;code&gt;content-encoding: gzip&lt;/code&gt; and
&lt;code&gt;content-type: application/javascript&lt;/code&gt; (for JS) headers, e.g.:&lt;/p&gt;
&lt;img alt="GCS response headers." src="https://jaro.blog/blog/images/gcs_gzip_resp.png" /&gt;
&lt;p&gt;If it does, then all is working as intended and we're home. That’s it,
so simple, isn’t it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Gzip compression of static files can significantly speed up loading of your
website especially if it’s a fairly complex one with a lot of CSS and JS files.
Luckily, if you’re using Google Cloud Storage, there’s really very little work
needed to make it happen. Adding only one option to the &lt;code&gt;gsutil&lt;/code&gt; command
can make your website load noticeably faster. There’s really no argument not do
it. 😉&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading"&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul class="footnotes"&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-1"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://royal.pingdom.com/can-gzip-compression-really-improve-web-performance/"&gt;Can gzip Compression Really Improve Web Performance?&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-2"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://cloud.google.com/storage/docs/transcoding"&gt;Transcoding of gzip-compressed files&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;span class="docutils footnote" id="footnote-3"&gt;
            &lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;
        &lt;/span&gt;
        &lt;span&gt;
            &lt;a class="reference external" href="https://cloud.google.com/storage/docs/gsutil/commands/cp"&gt;gsutil cp command documentation&lt;/a&gt;
        &lt;/span&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Web development"></category><category term="Google Cloud Storage"></category><category term="GCS"></category><category term="storage"></category><category term="gzip"></category><category term="compression"></category><category term="gsutil"></category><category term="cp"></category><category term="rsync"></category><category term="tips&amp;tricks"></category></entry></feed>